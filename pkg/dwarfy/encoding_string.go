// Code generated by "stringer -type Encoding -trimprefix=Enc"; DO NOT EDIT.

package dwarfy

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EncVoid-0]
	_ = x[EncAddress-1]
	_ = x[EncBoolean-2]
	_ = x[EncComplexFloat-3]
	_ = x[EncFloat-4]
	_ = x[EncSigned-5]
	_ = x[EncSignedChar-6]
	_ = x[EncUnsigned-7]
	_ = x[EncUnsignedChar-8]
	_ = x[EncImaginaryFloat-9]
	_ = x[EncPackedDecimal-10]
	_ = x[EncNumericString-11]
	_ = x[EncEdited-12]
	_ = x[EncSignedFixed-13]
	_ = x[EncUnsignedFixed-14]
	_ = x[EncDecimalFloat-15]
	_ = x[EncUtf-16]
	_ = x[EncUcs-17]
	_ = x[EncAscii-18]
	_ = x[EncLoUser-128]
	_ = x[EncHiUser-255]
}

const (
	_Encoding_name_0 = "VoidAddressBooleanComplexFloatFloatSignedSignedCharUnsignedUnsignedCharImaginaryFloatPackedDecimalNumericStringEditedSignedFixedUnsignedFixedDecimalFloatUtfUcsAscii"
	_Encoding_name_1 = "LoUser"
	_Encoding_name_2 = "HiUser"
)

var (
	_Encoding_index_0 = [...]uint8{0, 4, 11, 18, 30, 35, 41, 51, 59, 71, 85, 98, 111, 117, 128, 141, 153, 156, 159, 164}
)

func (i Encoding) String() string {
	switch {
	case 0 <= i && i <= 18:
		return _Encoding_name_0[_Encoding_index_0[i]:_Encoding_index_0[i+1]]
	case i == 128:
		return _Encoding_name_1
	case i == 255:
		return _Encoding_name_2
	default:
		return "Encoding(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
